[alembic]
# 使用时间戳 + 修订号 + 描述的文件名模板，清晰且按时间排序
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# --- Logging Configuration ---
# 推荐顺序：Formatters -> Handlers -> Loggers

[formatters]
# 定义可用的格式化器名称
keys = generic

[formatter_generic]
# 定义名为 'generic' 的格式
# %(levelname)-5.5s : 日志级别，左对齐5字符，只取前5个字符 (e.g., INFO, WARN, ERRO)
# [%(name)s] : 记录器名称，用方括号包围
# %(message)s : 实际的日志消息
# datefmt : 时间格式 (仅在日志消息中包含时间时生效，此format未包含时间)
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[handlers]
# 定义可用的处理器名称
keys = console

[handler_console]
# 配置名为 'console' 的处理器
class = StreamHandler
# 输出到标准错误流 (stderr)
args = (sys.stderr,)
# 处理器自身的级别。NOTSET 表示不在此处过滤，由记录器级别决定
level = NOTSET
# 使用 'generic' 格式化器来格式化日志消息
formatter = generic

[loggers]
# 定义需要配置的记录器名称
keys = root, sqlalchemy, alembic, flask_migrate

[logger_root]
# 根记录器，处理所有未被子记录器捕获的日志
level = WARN
# 关键：根记录器必须关联一个或多个处理器，否则日志无法输出！
handlers = console
# qualname 通常省略，对于 root 记录器是空或 root
qualname =

[logger_sqlalchemy]
# 专门捕获 sqlalchemy 包下的日志
level = WARN
# 不设置 handlers，日志会传递给父记录器 (root)
handlers =
# 指定此记录器对应的 Python 包/模块名
qualname = sqlalchemy.engine

[logger_alembic]
# 专门捕获 alembic 包下的日志
level = INFO
# 不设置 handlers，日志会传递给父记录器 (root)
handlers =
# 指定此记录器对应的 Python 包/模块名
qualname = alembic

[logger_flask_migrate]
# 专门捕获 flask_migrate 包下的日志
level = INFO
# 不设置 handlers，日志会传递给父记录器 (root)
handlers =
# 指定此记录器对应的 Python 包/模块名
qualname = flask_migrate